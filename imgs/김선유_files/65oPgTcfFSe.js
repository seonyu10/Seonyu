if (self.CavalryLogger) { CavalryLogger.start_js(["UeCvV"]); }

__d("MessengerQuickCamConfig",[],(function a(b,c,d,e,f,g){var h={success:"messenger/quick_cam/success",max_video_time:12e4,progress_increment:.01};f.exports=h}),null);
__d("ReactComposerFunFactSinglePromptTaggerContainer.react",["cx","Arbiter","AsyncRequest","ReactComposerAttachmentStore","ReactComposerFunFactTaggerComponent.react","ReactComposerLoggingName","ReactComposerTaggerActions","ReactComposerTaggerHideOnEscapeKeyPress.react","ReactComposerTaggerStore","ReactComposerTaggerType","FlexLayout.react","FluxContainer","ProfileFunFactsComposerEvents","ProfileFunFactsReactComposerTypedLogger","React","ReactComposerContextTypes","XProfileFunFactsSinglePromptFetchController","XUISpinner.react"],(function a(b,c,d,e,f,g,h){"use strict";__p&&__p();var i,j;i=babelHelpers.inherits(k,c("React").Component);j=i&&i.prototype;function k(){var l,m;for(var n=arguments.length,o=Array(n),p=0;p<n;p++)o[p]=arguments[p];return m=(l=j.constructor).call.apply(l,[this].concat(o)),this.$ReactComposerFunFactSinglePromptTaggerContainer2=function(){new(c("ProfileFunFactsReactComposerTypedLogger"))().setEvent(c("ProfileFunFactsComposerEvents").PROMPTS_CANCEL).setFunFactPromptID(this.state.taggerData.id).log();c("ReactComposerTaggerActions").setTaggerData(this.context.composerID,c("ReactComposerLoggingName").FUN_FACT,c("ReactComposerTaggerType").FUN_FACT,null)}.bind(this),m}k.getStores=function(){return[c("ReactComposerAttachmentStore"),c("ReactComposerTaggerStore")]};k.calculateState=function(l,m,n){var o=n.composerID,p=!!m.pinnedPromptID;return{isAttached:c("ReactComposerTaggerStore").hasData(o,c("ReactComposerTaggerType").FUN_FACT),isDisabled:c("ReactComposerTaggerStore").isDisabled(o,c("ReactComposerTaggerType").FUN_FACT),isLoading:l?l.isLoading:p,taggerData:c("ReactComposerTaggerStore").getTaggerData(o,c("ReactComposerTaggerType").FUN_FACT)}};k.prototype.componentDidMount=function(){c("Arbiter").inform("ReactFeedComposerXBootloader/funfactsloaded/"+this.context.composerID);if(this.props.pinnedPromptID)this.$ReactComposerFunFactSinglePromptTaggerContainer1()};k.prototype.$ReactComposerFunFactSinglePromptTaggerContainer1=function(){c("ReactComposerTaggerActions").setTaggerData(this.context.composerID,c("ReactComposerLoggingName").FUN_FACT,c("ReactComposerTaggerType").FUN_FACT,{promptID:this.props.pinnedPromptID});var l=c("XProfileFunFactsSinglePromptFetchController").getURIBuilder().setInt("fetch_amount",1).setFBID("pinned_prompt_id",this.props.pinnedPromptID).getURI();new(c("AsyncRequest"))(l).setHandler(function(m){var n=this.state.taggerData;n.prompt=m.getPayload()[0];c("ReactComposerTaggerActions").setTaggerData(this.context.composerID,c("ReactComposerLoggingName").FUN_FACT,c("ReactComposerTaggerType").FUN_FACT,n);this.setState({isLoading:false})}.bind(this)).send()};k.prototype.render=function(){if(!this.state.isAttached||this.state.isDisabled)return null;if(this.state.isLoading)return c("React").createElement(c("FlexLayout.react"),{align:"center",className:"_2ph_",direction:"vertical"},c("React").createElement(c("XUISpinner.react"),null));var l=this.state.taggerData.prompt;return c("React").createElement(c("ReactComposerTaggerHideOnEscapeKeyPress.react"),null,c("React").createElement(c("ReactComposerFunFactTaggerComponent.react"),{attribution:l.isCrowdsourced?l.attribution:null,emoji:l.emoji,onClose:this.$ReactComposerFunFactSinglePromptTaggerContainer2,showCloseButton:true,title:l.title}))};k.contextTypes=c("ReactComposerContextTypes");f.exports=c("FluxContainer").create(k,{withContext:true,withProps:true})}),null);